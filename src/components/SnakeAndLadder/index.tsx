import {Animated, Button,  ImageBackground, Text} from "react-native";
import styles from "./game.css";
import useSnakeAndLadder from "./hooks/hooks";
import Players from "./Players";
import { Dices } from "./Dices";
import {DICE_WIDTH, NUM_PLAYER, PLAYER_COLOR, PLAYER_IMAGE, PLAYER_WIDTH, screenHeight, screenWidth} from "./constants";
import Reanimated, {
    useAnimatedGestureHandler,
    useAnimatedStyle,
    useSharedValue,
    withDecay,
    withTiming
} from "react-native-reanimated";
import {useRef} from "react";
import {Gesture, GestureDetector, PanGestureHandler} from "react-native-gesture-handler";
import {animateTiming} from "./helpers.tsx";

let pathTraverse = [[182.3333282470703, 470.3333282470703], [182.3333282470703, 470.3333282470703], [179, 468.6666564941406], [177.3333282470703, 467.6666564941406], [177, 467], [177, 465.3333282470703], [176.66665649414062, 462.3333282470703], [176, 459.6666564941406], [175.3333282470703, 458], [175.3333282470703, 457], [175, 456.3333282470703], [175, 456], [175, 455.6666564941406], [175, 455.3333282470703], [175, 455], [175, 454.3333282470703], [174.66665649414062, 453.3333282470703], [174, 452], [173.3333282470703, 450], [173, 448.6666564941406], [173, 447.6666564941406], [172.66665649414062, 447.3333282470703], [172.66665649414062, 447], [172.3333282470703, 446.6666564941406], [172, 446.6666564941406], [171.66665649414062, 446.3333282470703], [171.3333282470703, 446], [170.66665649414062, 445.6666564941406], [169.3333282470703, 445], [167.66665649414062, 444.3333282470703], [166.3333282470703, 443.6666564941406], [165, 443], [164.3333282470703, 442.6666564941406], [164, 442.6666564941406], [163.66665649414062, 442.6666564941406], [163.66665649414062, 442.3333282470703], [163.66665649414062, 442], [163.66665649414062, 441.6666564941406], [163.3333282470703, 441.3333282470703], [163, 440.6666564941406], [162.3333282470703, 439.6666564941406], [162, 439], [161.66665649414062, 438.3333282470703], [161.3333282470703, 438], [161.3333282470703, 437.6666564941406], [182.3333282470703, 432], [182.3333282470703, 432], [185.66665649414062, 431.6666564941406], [188.66665649414062, 431], [191.66665649414062, 430.3333282470703], [197, 430], [199.66665649414062, 429.6666564941406], [202, 429.6666564941406], [204.66665649414062, 429.3333282470703], [209.66665649414062, 429.3333282470703], [211.66665649414062, 429.3333282470703], [213.66665649414062, 429.3333282470703], [217, 429.3333282470703], [219, 429.3333282470703], [221, 429.3333282470703], [226, 429.3333282470703], [230.66665649414062, 429.3333282470703], [233, 429.3333282470703], [235, 429.3333282470703], [237, 429.3333282470703], [239, 429.3333282470703], [240.66665649414062, 429.3333282470703], [242, 429.3333282470703], [243.66665649414062, 429.3333282470703], [245.3333282470703, 429.3333282470703], [246.66665649414062, 429.3333282470703], [248.3333282470703, 429.3333282470703], [250.3333282470703, 429.3333282470703], [251.66665649414062, 429.3333282470703], [253.3333282470703, 429.3333282470703], [254.66665649414062, 429.3333282470703], [256, 429.3333282470703], [260, 429.3333282470703], [262.3333282470703, 429.3333282470703], [267, 429.3333282470703], [269, 429.3333282470703], [271.3333282470703, 429.3333282470703], [273, 429.3333282470703], [274.6666564941406, 429.3333282470703], [278.3333282470703, 429.6666564941406], [280, 430.3333282470703], [281.6666564941406, 430.6666564941406], [283, 431], [284.3333282470703, 431.3333282470703], [285.3333282470703, 432], [286, 432], [286.3333282470703, 432.3333282470703], [286.3333282470703, 432.6666564941406], [286.6666564941406, 433], [288.6666564941406, 434.3333282470703], [291, 436], [293.6666564941406, 438], [296, 439.6666564941406], [298, 441.6666564941406], [298.3333282470703, 442.3333282470703], [298.3333282470703, 442.6666564941406], [298.3333282470703, 443], [298.3333282470703, 443.3333282470703], [298.6666564941406, 444], [299, 445.3333282470703], [299.6666564941406, 447.3333282470703], [300.3333282470703, 450.6666564941406], [300.6666564941406, 452.3333282470703], [301, 453.3333282470703], [301, 455.3333282470703], [301, 457], [301, 459.3333282470703], [301, 460.6666564941406], [301, 462], [301, 466.3333282470703], [301, 469], [300.6666564941406, 471], [299.3333282470703, 475.3333282470703], [299, 477.3333282470703], [298.3333282470703, 479], [297.3333282470703, 481.6666564941406], [296.6666564941406, 484.3333282470703], [296, 486.3333282470703], [295.3333282470703, 488], [294.3333282470703, 490], [293.6666564941406, 491.6666564941406], [292.6666564941406, 493.3333282470703], [291.6666564941406, 495.3333282470703], [290.3333282470703, 497.3333282470703], [289, 499.3333282470703], [288, 501], [286.3333282470703, 503.6666564941406], [285.6666564941406, 504.6666564941406], [284.6666564941406, 506.3333282470703], [284.3333282470703, 507.6666564941406], [283.6666564941406, 509], [283, 510.6666564941406], [282.6666564941406, 512.3333282470703], [282, 514.3333282470703], [281.3333282470703, 516.6666564941406], [281, 518.3333282470703], [280.6666564941406, 519.6666564941406], [280.3333282470703, 521.3333282470703], [280, 523], [279.6666564941406, 524.3333282470703], [279, 528], [278.6666564941406, 529.3333282470703], [278.6666564941406, 531], [278.3333282470703, 532.6666564941406], [278.3333282470703, 534], [278.3333282470703, 535], [278.3333282470703, 536.6666564941406], [278.3333282470703, 539], [278.3333282470703, 540.3333282470703], [278.3333282470703, 541.3333282470703], [278.3333282470703, 542], [278.3333282470703, 543], [278.3333282470703, 544.6666564941406], [279, 548.3333282470703], [280, 552.3333282470703], [282, 558.3333282470703], [282.6666564941406, 559.6666564941406], [283, 560.3333282470703], [283.3333282470703, 561.3333282470703], [283.3333282470703, 561.6666564941406], [283.6666564941406, 561.6666564941406], [284.3333282470703, 563], [286, 565.6666564941406], [288, 569.3333282470703], [290, 572.3333282470703], [291.6666564941406, 575], [293.3333282470703, 577], [294.6666564941406, 578.6666564941406], [296, 580], [297.3333282470703, 581.3333282470703], [298.6666564941406, 582.6666564941406], [299.6666564941406, 584], [301.6666564941406, 586.3333282470703], [302.6666564941406, 587.6666564941406], [303.6666564941406, 589], [304.3333282470703, 590.3333282470703], [305, 592], [306.6666564941406, 594.6666564941406], [307.3333282470703, 596], [308, 597.3333282470703], [308.3333282470703, 598.6666564941406], [308.6666564941406, 599.6666564941406], [309, 601], [309.6666564941406, 602.3333282470703], [309.6666564941406, 604], [310, 605.6666564941406], [310, 607.6666564941406], [310, 609], [310, 610.3333282470703], [310.3333282470703, 611.6666564941406], [310.3333282470703, 612.3333282470703], [310.3333282470703, 615], [310.3333282470703, 617.3333282470703], [310.3333282470703, 619.3333282470703], [310.3333282470703, 621], [310.3333282470703, 622.3333282470703], [310.3333282470703, 623.6666564941406], [310.3333282470703, 625.6666564941406], [310.3333282470703, 627], [310.3333282470703, 628], [310.3333282470703, 629.3333282470703], [310.3333282470703, 632.3333282470703], [310.3333282470703, 634.3333282470703], [310.3333282470703, 636], [310.3333282470703, 637.3333282470703], [310.3333282470703, 638], [310.3333282470703, 639], [310.3333282470703, 640], [310.3333282470703, 640.6666564941406], [310.3333282470703, 641.3333282470703], [310.3333282470703, 642.3333282470703], [310.3333282470703, 643]]

function SnakeAndLadder() {
    const { playerRefs, dicesRef, currentPlayerRef,  throwDice,resetGame } = useSnakeAndLadder();

    const offsetX = useSharedValue(0)
    const offsetY = useSharedValue(0)

    let arrayRef = useRef<number[][]>([])

    const pan = Gesture.Pan().onStart((event)=> {
    }).onBegin( (event)=> {

    }).onUpdate(event => {
        // console.log(event.x, event.y)
    }).onChange((event)=> {
        arrayRef.current= [...arrayRef.current, [event.absoluteX, event.absoluteY]];
        offsetX.value += event.changeX;
        offsetY.value += event.changeY;
        console.log("-----------------------------------")
        console.log(arrayRef.current)
    }).onFinalize((event) => {
        console.log("Final",arrayRef.current);
        while(arrayRef.current.length > 0) {
            let points = arrayRef.current.pop()
            if(points) {
                offsetX.value = withTiming(points[0], {duration: 100});
                offsetY.value = withTiming(points[1], {duration: 100});
            }
            // offsetY.value = withDecay({
            //     velocity: event.velocityY,
            //     rubberBandEffect: true,
            //     clamp: [-screenHeight/2 + DICE_WIDTH/2, screenHeight/2 - DICE_WIDTH/2]
            // })
        }
        // offsetX.value = withDecay({
        //     velocity: event.velocityX,
        //     rubberBandEffect: true,
        //     clamp: [-screenWidth/2 + DICE_WIDTH/2, screenWidth/2 - DICE_WIDTH/2]
        // })
        // offsetY.value = withDecay({
        //     velocity: event.velocityY,
        //     rubberBandEffect: true,
        //     clamp: [-screenHeight/2 + DICE_WIDTH/2, screenHeight/2 - DICE_WIDTH/2]
        // })
    })

    const playerStyles = useAnimatedStyle(()=> {
        return ({
            transform: [{
                translateX: offsetX.value,
            }, {
                translateY: offsetY.value,
            }]
        });
    })

    const backgroundStyles = {
        backgroundColor: currentPlayerRef.current.interpolate({
            inputRange: Array(NUM_PLAYER).fill(null).map((_, i) => i),
            outputRange: PLAYER_COLOR
        })
    }

    const traversePath = async () => {
        for(let i = 0; i < pathTraverse.length; i++) {
            const path = pathTraverse[i];
            await Promise.all([animateTiming(offsetX,  - screenWidth/2 + path[0] - PLAYER_WIDTH/2, {
                duration: 5
            }), animateTiming(offsetY, - screenHeight/2 + path[1] - PLAYER_WIDTH/2, {
                duration: 5
            })]);
        }

    }

    return <Animated.View style={[styles.container, backgroundStyles]}>




        <Button title="Animate" onPress={traversePath}/>
        {/*<Button title="Reset" onPress={resetGame}/>*/}

        <ImageBackground source={require('./assets/board.png')} style={styles.board} >



        {/*    <Players playerRefs={playerRefs} />*/}
        </ImageBackground>

        <GestureDetector gesture={pan}>
            <Reanimated.Image  source={PLAYER_IMAGE['red']} style={[styles.diceOnly, playerStyles]} />
        </GestureDetector>


        {/*<Dices dicesRef={dicesRef} onPress={throwDice} />*/}

    </Animated.View>
}

export default SnakeAndLadder
